# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: bookshelf-api
# app and org for use with dashboard.serverless.com
app: bookshelf-api-app
org: leemcknight

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  lambdaHashingVersion: 20201221
  iamRoleStatusments:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"    

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  getLibrary:
    handler: handler.getLibrary
    events:
      - http:
          cors: true
          path: /users/library
          method: get          
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer     
  getBooksInBookshelf:
    handler: handler.getBooks
    events:
      - http:
          cors: true
          path: /users/library/bookshelf/{bookshelfId}
          method: get
          request: 
            parameters: 
              paths:                 
                bookshelfId: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer      
  addUser:
    handler: handler.addUser
    events:
      - http:
          cors: true
          path: /users/
          method: post          
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer      
  addBookshelf:
    handler: handler.addBookshelf
    events:
      - http:
          cors: true
          path: /users/library
          method: post          
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  addBookToBookshelf:
    handler: handler.addBookToBookshelf
    events:
      - http:
          cors: true
          path: /users/library/bookshelf/{bookshelfId}
          method: post
          request: 
            parameters: 
              paths:                 
                bookshelfId: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

resources:
  Resources:
    ApiGatewayAuthorizer:
        Type: AWS::ApiGateway::Authorizer
        Properties:
            Name: CognitoUserPool
            Type: COGNITO_USER_POOLS
            IdentitySource: method.request.header.Authorization
            RestApiId:
                Ref: ApiGatewayRestApi
            ProviderARNs:
                - Fn::GetAtt:
                    - BookshelfPool
                    - Arn
    BookshelfPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: bookshelf-pool
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: email
            Required: false