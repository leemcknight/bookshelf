service: bookshelf-api
# app and org for use with dashboard.serverless.com
app: bookshelf-api-app
org: leemcknight

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  lambdaHashingVersion: 20201221
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"    
functions:
  getLibrary:
    handler: lambda/handler.getLibrary
    events:
      - http:
          cors: true
          path: /users/library
          method: get          
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer     
  getBooksInBookshelf:
    handler: lambda/handler.getBooks
    events:
      - http:
          cors: true
          path: /users/library/bookshelf/{bookshelfId}
          method: get
          request: 
            parameters: 
              paths:                 
                bookshelfId: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer      
  addUser:
    handler: lambda/handler.addUser    
  getUserProfile:
    handler: lambda/handler.getUserProfile
    events:
      - http:
          cors: true
          path: /users/profile
          method: get          
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer      
  updateUserProfile:
    handler: lambda/handler.updateUserProfile
    events:
      - http:
          cors: true
          path: /users/profile
          method: patch          
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer      
  addBookshelf:
    handler: handler.addBookshelf
    events:
      - http:
          cors: true
          path: /users/library
          method: post          
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  addBookToBookshelf:
    handler: lambda/handler.addBookToBookshelf
    events:
      - http:
          cors: true
          path: /users/library/bookshelf/{bookshelfId}
          method: post
          request: 
            parameters: 
              paths:                 
                bookshelfId: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

resources:
  Resources:
    ApiGatewayAuthorizer:
        Type: AWS::ApiGateway::Authorizer
        Properties:
            Name: CognitoUserPool
            Type: COGNITO_USER_POOLS
            IdentitySource: method.request.header.Authorization
            RestApiId:
                Ref: ApiGatewayRestApi
            ProviderARNs:
                - Fn::GetAtt:
                    - BookshelfPool
                    - Arn
    BookshelfPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: bookshelf-pool
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: email
            Required: false